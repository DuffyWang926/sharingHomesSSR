{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadDataSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadNodeSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(nodeSaga);\n\n/* global fetch */\nimport { delay } from 'redux-saga';\nimport { all, call, put, take, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { LOGIN, TEST_NODE } from '../actionTypes/header';\nimport { loginSuccess } from '../actions/header';\nimport { failure } from '../actions/actions';\nimport { getUserData, getNodeData } from '../api/header';\nes6promise.polyfill();\n\nfunction loadDataSaga(action) {\n  var payload, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = action.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(getUserData(payload));\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put(loginSuccess(data));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put(failure(_context.t0));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n\nfunction loginSaga() {\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(LOGIN, loadDataSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadNodeSaga(action) {\n  var payload, _yield$call2, data;\n\n  return _regeneratorRuntime.wrap(function loadNodeSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = action.payload;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(getNodeData(payload));\n\n        case 4:\n          _yield$call2 = _context3.sent;\n          data = _yield$call2.data;\n          _context3.next = 8;\n          return put(loginSuccess(data));\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 14;\n          return put(failure(_context3.t0));\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n\nfunction nodeSaga() {\n  return _regeneratorRuntime.wrap(function nodeSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeLatest(TEST_NODE, loadNodeSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nvar headerSaga = [loginSaga, nodeSaga];\nexport default headerSaga;","map":{"version":3,"sources":["/Users/wangenfei/Desktop/workplace/reactManual/sharingHomesNext/sharingHomesSSR/saga/header.js"],"names":["loadDataSaga","loginSaga","loadNodeSaga","nodeSaga","delay","all","call","put","take","takeLatest","es6promise","LOGIN","TEST_NODE","loginSuccess","failure","getUserData","getNodeData","polyfill","action","payload","data","headerSaga"],"mappings":";;oDAeWA,Y;qDAWAC,S;qDAMAC,Y;qDAWAC,Q;;AA3CX;AAEA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,QAA+C,oBAA/C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP;AAEA,SAAUC,KAAV,EAAiBC,SAAjB,QAAkC,uBAAlC;AACA,SAASC,YAAT,QAA8B,mBAA9B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,eAAvC;AAEAN,UAAU,CAACO,QAAX;;AAGA,SAAWjB,YAAX,CAAyBkB,MAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,OADV,GACsBD,MADtB,CACUC,OADV;AAAA;AAAA;AAGmB,iBAAMb,IAAI,CAACS,WAAW,CAACI,OAAD,CAAZ,CAAV;;AAHnB;AAAA;AAGWC,UAAAA,IAHX,eAGWA,IAHX;AAAA;AAKI,iBAAMb,GAAG,CAACM,YAAY,CAACO,IAAD,CAAb,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMb,GAAG,CAACO,OAAO,aAAR,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAWb,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,GAAG,CAAC,CACRI,UAAU,CAACE,KAAD,EAAQX,YAAR,CADF,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAWE,YAAX,CAAyBgB,MAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,OADV,GACsBD,MADtB,CACUC,OADV;AAAA;AAAA;AAGmB,iBAAMb,IAAI,CAACU,WAAW,CAACG,OAAD,CAAZ,CAAV;;AAHnB;AAAA;AAGWC,UAAAA,IAHX,gBAGWA,IAHX;AAAA;AAKI,iBAAMb,GAAG,CAACM,YAAY,CAACO,IAAD,CAAb,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMb,GAAG,CAACO,OAAO,cAAR,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAWX,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,GAAG,CAAC,CACRI,UAAU,CAACG,SAAD,EAAYV,YAAZ,CADF,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,IAAMmB,UAAU,GAAG,CACjBpB,SADiB,EAEjBE,QAFiB,CAAnB;AAIA,eAAekB,UAAf","sourcesContent":["/* global fetch */\n\nimport {delay} from 'redux-saga'\nimport {all, call, put, take, takeLatest} from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\nimport {  LOGIN, TEST_NODE } from '../actionTypes/header'\nimport { loginSuccess  } from '../actions/header'\nimport { failure } from '../actions/actions'\nimport {getUserData, getNodeData} from '../api/header'\n\nes6promise.polyfill()\n\n\nfunction * loadDataSaga (action) {\n  const { payload } = action\n  try {\n    const {data} = yield call(getUserData(payload))\n\n    yield put(loginSuccess(data))\n  } catch (err) {\n    yield put(failure(err))\n  }\n}\n\nfunction * loginSaga () {\n  yield all([\n    takeLatest(LOGIN, loadDataSaga)\n  ])\n}\n\nfunction * loadNodeSaga (action) {\n  const { payload } = action\n  try {\n    const {data} = yield call(getNodeData(payload))\n\n    yield put(loginSuccess(data))\n  } catch (err) {\n    yield put(failure(err))\n  }\n}\n\nfunction * nodeSaga () {\n  yield all([\n    takeLatest(TEST_NODE, loadNodeSaga)\n  ])\n}\nconst headerSaga = [\n  loginSaga,\n  nodeSaga\n]\nexport default headerSaga"]},"metadata":{},"sourceType":"module"}