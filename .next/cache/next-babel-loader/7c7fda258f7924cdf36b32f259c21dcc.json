{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadDataSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga);\n\n/* global fetch */\nimport { all, call, put, take, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { SEARCHROOMS } from '../actionTypes/searchRooms';\nimport { searchRoomsSuccess } from '../actions/searchRooms';\nimport { failure } from '../actions/actions';\nimport { getRoomsData } from '../api/searchRooms';\nes6promise.polyfill();\n\nfunction loadDataSaga(action) {\n  var payload, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = action.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(getRoomsData(payload));\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put(searchRoomsSuccess(data));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put(failure(_context.t0));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n\nfunction loginSaga() {\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(SEARCHROOMS, loadDataSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nvar searchRoomsSaga = [loginSaga];\nexport default searchRoomsSaga;","map":{"version":3,"sources":["/Users/wangenfei/Desktop/workplace/reactManual/sharingHomesNext/sharingHomesSSR/saga/searchRooms.js"],"names":["loadDataSaga","loginSaga","all","call","put","take","takeLatest","es6promise","SEARCHROOMS","searchRoomsSuccess","failure","getRoomsData","polyfill","action","payload","data","searchRoomsSaga"],"mappings":";;oDAcWA,Y;qDAWAC,S;;AAzBX;AAEA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,QAA+C,oBAA/C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP;AAEA,SAAUC,WAAV,QAA6B,4BAA7B;AACA,SAASC,kBAAT,QAAoC,wBAApC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAAQC,YAAR,QAA2B,oBAA3B;AAEAJ,UAAU,CAACK,QAAX;;AAGA,SAAWZ,YAAX,CAAyBa,MAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,OADV,GACsBD,MADtB,CACUC,OADV;AAAA;AAAA;AAGmB,iBAAMX,IAAI,CAACQ,YAAY,CAACG,OAAD,CAAb,CAAV;;AAHnB;AAAA;AAGWC,UAAAA,IAHX,eAGWA,IAHX;AAAA;AAKI,iBAAMX,GAAG,CAACK,kBAAkB,CAACM,IAAD,CAAnB,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMX,GAAG,CAACM,OAAO,aAAR,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAWT,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,GAAG,CAAC,CACRI,UAAU,CAACE,WAAD,EAAcR,YAAd,CADF,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAMgB,eAAe,GAAG,CACtBf,SADsB,CAAxB;AAGA,eAAee,eAAf","sourcesContent":["/* global fetch */\n\nimport {all, call, put, take, takeLatest} from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\nimport {  SEARCHROOMS } from '../actionTypes/searchRooms'\nimport { searchRoomsSuccess  } from '../actions/searchRooms'\nimport { failure } from '../actions/actions'\nimport {getRoomsData} from '../api/searchRooms'\n\nes6promise.polyfill()\n\n\nfunction * loadDataSaga (action) {\n  const { payload } = action\n  try {\n    const {data} = yield call(getRoomsData(payload))\n\n    yield put(searchRoomsSuccess(data))\n  } catch (err) {\n    yield put(failure(err))\n  }\n}\n\nfunction * loginSaga () {\n  yield all([\n    takeLatest(SEARCHROOMS, loadDataSaga)\n  ])\n}\n\nconst searchRoomsSaga = [\n  loginSaga\n]\nexport default searchRoomsSaga"]},"metadata":{},"sourceType":"module"}