{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducer/index';\nimport rootSaga from './saga/index';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nfunction configureStore(initialState = {}) {\n  const store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware]));\n\n  store.runSagaTask = () => {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  };\n\n  store.runSagaTask();\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["/Users/wangenfei/Desktop/workplace/reactManual/sharingHomesNext/sharingHomesSSR/store.js"],"names":["createStore","applyMiddleware","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","bindMiddleware","middleware","process","env","NODE_ENV","composeWithDevTools","require","configureStore","initialState","store","runSagaTask","sagaTask","run"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAGA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;;AAEA,MAAMI,cAAc,GAAIC,UAAD,IAAgB;AACrC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACV,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAON,eAAe,CAAC,GAAGM,UAAJ,CAAtB;AACD,CAND;;AAQA,SAASM,cAAT,CAAyBC,YAAY,GAAG,EAAxC,EAA4C;AAC1C,QAAMC,KAAK,GAAGf,WAAW,CACvBG,WADuB,EAEvBW,YAFuB,EAGvBR,cAAc,CAAC,CAACD,cAAD,CAAD,CAHS,CAAzB;;AAMAU,EAAAA,KAAK,CAACC,WAAN,GAAoB,MAAM;AACxBD,IAAAA,KAAK,CAACE,QAAN,GAAiBZ,cAAc,CAACa,GAAf,CAAmBd,QAAnB,CAAjB;AACD,GAFD;;AAIAW,EAAAA,KAAK,CAACC,WAAN;AACA,SAAOD,KAAP;AACD;;AAED,eAAeF,cAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootReducer from './reducer/index'\nimport rootSaga from './saga/index'\n\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst bindMiddleware = (middleware) => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension')\n    return composeWithDevTools(applyMiddleware(...middleware))\n  }\n  return applyMiddleware(...middleware)\n}\n\nfunction configureStore (initialState = {}) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    bindMiddleware([sagaMiddleware])\n  )\n\n  store.runSagaTask = () => {\n    store.sagaTask = sagaMiddleware.run(rootSaga)\n  }\n\n  store.runSagaTask()\n  return store\n}\n\nexport default configureStore"]},"metadata":{},"sourceType":"module"}